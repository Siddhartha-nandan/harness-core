apiVersion: apps/v1
kind: Deployment
metadata:
  name: ng-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ng-manager.labels" . | nindent 4 }}
    {{- if .Values.global.commonLabels }}
    {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.global.commonAnnotations }}
  annotations: {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  progressDeadlineSeconds: 800
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: {{.Values.maxUnavailable}}
  selector:
    matchLabels:
      {{- include "ng-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- include "harnesscommon.monitoring.annotations" . | nindent 8 }}
      labels:
        app: ng-manager
        {{- include "ng-manager.selectorLabels" . | nindent 8 }}
        {{- if .Values.global.commonLabels }}
        {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.global.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.podLabels }}
        {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
       {{- include "ng-manager.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "ng-manager.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30
      initContainers:
      - name: wait-for-harness-manager
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=harness-manager"
      - name: wait-for-pipeline
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=pipeline-service"
      containers:
      - name: ng-manager
        image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        ports:
        - name: http-ng-manager
          containerPort: {{ .Values.service.port }}
          protocol: "TCP"
        - name: grpc-ng-manager
          containerPort: {{ .Values.service.grpcport }}
          protocol: "TCP"
        - name: grpc-git-sync
          containerPort: {{ .Values.service.gitsyncgrpcport }}
          protocol: "TCP"
        {{- include "harnesscommon.monitoring.containerPort" . | nindent 8 }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        env:
{{/*            {{- include "harnesscommon.dbconnectionv2.timescaleSslEnv" (dict "sslModeValue" "require" "certVariableName" "TIMESCALEDB_SSL_ROOT_CERT" "context" $ ) | nindent 12 }}*/}}
            {{- $localESOSecretCtxIdentifier := (include "harnesscommon.secrets.localESOSecretCtxIdentifier" (dict "ctx" $ )) }}
            {{- include "harnesscommon.secrets.manageEnv" (dict "ctx" . "variableName" "LOG_STREAMING_SERVICE_TOKEN" "defaultKubernetesSecretName" "harness-manager-secret" "defaultKubernetesSecretKey" "LOG_STREAMING_SERVICE_TOKEN" "extKubernetesSecretCtxs" (list .Values.secrets.kubernetesSecrets) "esoSecretCtxs" (list (dict "secretCtxIdentifier" $localESOSecretCtxIdentifier "secretCtx" .Values.secrets.secretManagement.externalSecretsOperator))) | indent 12 }}
            {{- include "harnesscommon.dbconnectionv2.redisEnv" (dict "ctx" . "localRedisCtx" .Values.redis "globalRedisCtx" .Values.global.database.redis) | indent 12 }}
            {{- include "harnesscommon.dbconnectionv2.mongoEnv" (dict "ctx" . "localDBCtx" .Values.mongo "globalDBCtx" .Values.global.database.mongo) | indent 12 }}
            {{- include "harnesscommon.dbconnectionv2.timescaleEnv" (dict "ctx" . "localTimescaleDBCtx" .Values.timescaledb "globalTimescaleDBCtx" .Values.global.database.timescaledb) | indent 12 }}
            - name: MONGO_URI
              value: {{ include "harnesscommon.dbconnectionv2.mongoConnection" (dict "ctx" $ "database" "ng-harness" ) }}
            - name : NOTIFICATION_MONGO_URI
              value: {{ include "harnesscommon.dbconnectionv2.mongoConnection" (dict "ctx" $ "database" "notifications" ) }}
            - name: PMS_MONGO_URI
              value: {{ include "harnesscommon.dbconnectionv2.mongoConnection" (dict "ctx" $ "database" "pms-harness" ) }}
            - name: TIMESCALE_URI
              value: {{ include "harnesscommon.dbconnectionv2.timescaleConnection" (dict "protocol" "jdbc:postgresql" "database" "harness" "context" $) }}
            {{- if .Values.global.ccm.enabled }}
            - name : CE_AWS_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ceSecret.access_key.name }}
                  key: {{ .Values.ceSecret.access_key.key }}
            - name : CE_AWS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ceSecret.secret_key.name }}
                  key: {{ .Values.ceSecret.secret_key.key }}
            - name : CE_AWS_DESTINATION_BUCKET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ceSecret.destination_bucket.name }}
                  key: {{ .Values.ceSecret.destination_bucket.key }}
            - name : CE_AWS_TEMPLATE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ceSecret.template_url.name }}
                  key: {{ .Values.ceSecret.template_url.key }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
        {{- if .Values.lifecycleHooks }}
        lifecycle: {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
        {{- end }}
        {{- if .Values.extraVolumeMounts }}
        volumeMounts:
        {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: ng-manager
        {{- toYaml .Values.probes | nindent 8}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ng-manager
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.extraVolumes }}
      volumes:
      {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.extraVolumes "context" $ ) | nindent 8 }}
      {{- end }}