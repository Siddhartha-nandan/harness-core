// Copyright 2021 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Shield 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.

syntax = "proto3";

package io.harness.delegate;

import "google/protobuf/duration.proto";
import "920-delegate-service-beans/src/main/proto/io/harness/delegate/resource.proto";
import "920-delegate-service-beans/src/main/proto/io/harness/delegate/secrets.proto";
import "920-delegate-service-beans/src/main/proto/io/harness/delegate/log_config.proto";
option go_package = "920_delegate_service_beans";

option java_multiple_files = true;

message ExecutionInfrastructure {
  LogConfig log_config = 1;
  repeated Secret secret = 2;
  oneof {
    K8sInfraSpec k8Infraspec = 3;
    // VMInfraSpec vmInfraSpec = 4;
  }
}

message ContainerSpec {
  string type = 1;  // Type of the plugin, can be anything from enum TaskType or any additional 3rd party plugins. It
                    // can be left out if plugin can execute a single type of task
  PluginSource source = 2;            // Source for the plugin
  string image_tag = 3;               // Docker image tag
  repeated int64 port = 4;            // Port exposed for the container
  ResourceRequirements resource = 5;  // Resource requirements for infra types that need it (e.g. K8S CPU/Mem)
  map<string, string> env = 6;        // Env variables
  repeated string command = 7;        // Commands to be executed
  repeated string arg = 8;            // Args to be passed
  string working_dir = 9;             // Working dir that all tasks have read/write access to
}

message K8sInfraSpec {
  repeated K8SStep steps = 1;
  repeated Secret infra_secrets = 2;     // Secret needed to setup execution environment (e.g. imagePullSecrets)
  ResourceRequirements resource = 3;     // Global resource requirements for infra types that need it (e.g. K8S CPU/Mem)
  map<string, string> env = 4;           // Any global env variables
  SecurityContext security_context = 5;  // Startup user id for the execution infra
  string working_dir = 6;                // Working dir that all tasks have read/write access to
  repeated Resource resources = 7;       // Any global resources like shared volumes
  map<string, ContainerSpec> aux_container_specs = 8;  // Spec for auxiliary containers that facilitate task execution
}

message K8SStep {
  string id = 1;           // Id for the step
  ExecutionMode mode = 2;  // Is step going to be executed once or periodically
  ExecutionPriority priority =
      3;  // Priority of the step. Under heavier load, higher priority steps may have precedence
  ExecutionType execution_type = 4;      // Type of the step
  ContainerSpec container_spec = 5;      // Spec for the container environment
  SecurityContext security_context = 6;  // Startup user id for the execution infra
}

/*
  Defines security context for running a task. Note these values would always be there (unless entire context is
  omitted) with their defaults. E.g.
    privileged = false; runAsUser = 0 (root); runAsNonRoot = false; allowPrivilegeEscalation = false;
 */
message SecurityContext {
  bool allowPrivilegeEscalation = 1;
  bool privileged = 2;
  string procMount = 3;
  bool readOnlyRootFilesystem = 4;
  bool runAsNonRoot = 5;
  int64 runAsGroup = 6;
  int64 runAsUser = 7;
  repeated string add_capability = 8;
  repeated string drop_capability = 9;
}

message ScheduleTaskRequest {
  //    ExecutionRequest execution = 1;
  string infraRef = 1;
  SchedulingConfig config = 2;
}
