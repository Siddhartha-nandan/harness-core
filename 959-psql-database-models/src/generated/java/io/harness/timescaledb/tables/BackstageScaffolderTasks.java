/*
 * Copyright 2023 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.
 */

/*
 * This file is generated by jOOQ.
 */
package io.harness.timescaledb.tables;

import io.harness.timescaledb.Indexes;
import io.harness.timescaledb.Keys;
import io.harness.timescaledb.Public;
import io.harness.timescaledb.tables.records.BackstageScaffolderTasksRecord;

import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class BackstageScaffolderTasks extends TableImpl<BackstageScaffolderTasksRecord> {
  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.backstage_scaffolder_tasks</code>
   */
  public static final BackstageScaffolderTasks BACKSTAGE_SCAFFOLDER_TASKS = new BackstageScaffolderTasks();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<BackstageScaffolderTasksRecord> getRecordType() {
    return BackstageScaffolderTasksRecord.class;
  }

  /**
   * The column <code>public.backstage_scaffolder_tasks.id</code>.
   */
  public final TableField<BackstageScaffolderTasksRecord, String> ID =
      createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.backstage_scaffolder_tasks.account_identifier</code>.
   */
  public final TableField<BackstageScaffolderTasksRecord, String> ACCOUNT_IDENTIFIER =
      createField(DSL.name("account_identifier"), SQLDataType.VARCHAR(64).nullable(false), this, "");

  /**
   * The column <code>public.backstage_scaffolder_tasks.identifier</code>.
   */
  public final TableField<BackstageScaffolderTasksRecord, String> IDENTIFIER =
      createField(DSL.name("identifier"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.backstage_scaffolder_tasks.entity_ref</code>.
   */
  public final TableField<BackstageScaffolderTasksRecord, String> ENTITY_REF =
      createField(DSL.name("entity_ref"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.backstage_scaffolder_tasks.name</code>.
   */
  public final TableField<BackstageScaffolderTasksRecord, String> NAME =
      createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

  /**
   * The column <code>public.backstage_scaffolder_tasks.number_of_steps</code>.
   */
  public final TableField<BackstageScaffolderTasksRecord, Short> NUMBER_OF_STEPS =
      createField(DSL.name("number_of_steps"), SQLDataType.SMALLINT.nullable(false), this, "");

  /**
   * The column <code>public.backstage_scaffolder_tasks.status</code>.
   */
  public final TableField<BackstageScaffolderTasksRecord, String> STATUS =
      createField(DSL.name("status"), SQLDataType.VARCHAR(32).nullable(false), this, "");

  /**
   * The column <code>public.backstage_scaffolder_tasks.created_at</code>.
   */
  public final TableField<BackstageScaffolderTasksRecord, Long> CREATED_AT =
      createField(DSL.name("created_at"), SQLDataType.BIGINT.nullable(false), this, "");

  /**
   * The column <code>public.backstage_scaffolder_tasks.last_heartbeat_at</code>.
   */
  public final TableField<BackstageScaffolderTasksRecord, Long> LAST_HEARTBEAT_AT =
      createField(DSL.name("last_heartbeat_at"), SQLDataType.BIGINT, this, "");

  /**
   * The column <code>public.backstage_scaffolder_tasks.task_run_time_minutes</code>.
   */
  public final TableField<BackstageScaffolderTasksRecord, Short> TASK_RUN_TIME_MINUTES =
      createField(DSL.name("task_run_time_minutes"), SQLDataType.SMALLINT, this, "");

  private BackstageScaffolderTasks(Name alias, Table<BackstageScaffolderTasksRecord> aliased) {
    this(alias, aliased, null);
  }

  private BackstageScaffolderTasks(Name alias, Table<BackstageScaffolderTasksRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.backstage_scaffolder_tasks</code> table reference
   */
  public BackstageScaffolderTasks(String alias) {
    this(DSL.name(alias), BACKSTAGE_SCAFFOLDER_TASKS);
  }

  /**
   * Create an aliased <code>public.backstage_scaffolder_tasks</code> table reference
   */
  public BackstageScaffolderTasks(Name alias) {
    this(alias, BACKSTAGE_SCAFFOLDER_TASKS);
  }

  /**
   * Create a <code>public.backstage_scaffolder_tasks</code> table reference
   */
  public BackstageScaffolderTasks() {
    this(DSL.name("backstage_scaffolder_tasks"), null);
  }

  public <O extends Record> BackstageScaffolderTasks(
      Table<O> child, ForeignKey<O, BackstageScaffolderTasksRecord> key) {
    super(child, key, BACKSTAGE_SCAFFOLDER_TASKS);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.BACKSTAGE_SCAFFOLDER_TASKS_ACCOUNT_IDENTIFIER_CREATED_AT_IDX,
        Indexes.BACKSTAGE_SCAFFOLDER_TASKS_UNIQUE_IDX);
  }

  @Override
  public UniqueKey<BackstageScaffolderTasksRecord> getPrimaryKey() {
    return Keys.BACKSTAGE_SCAFFOLDER_TASKS_PKEY;
  }

  @Override
  public List<UniqueKey<BackstageScaffolderTasksRecord>> getKeys() {
    return Arrays.<UniqueKey<BackstageScaffolderTasksRecord>>asList(Keys.BACKSTAGE_SCAFFOLDER_TASKS_PKEY);
  }

  @Override
  public BackstageScaffolderTasks as(String alias) {
    return new BackstageScaffolderTasks(DSL.name(alias), this);
  }

  @Override
  public BackstageScaffolderTasks as(Name alias) {
    return new BackstageScaffolderTasks(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public BackstageScaffolderTasks rename(String name) {
    return new BackstageScaffolderTasks(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public BackstageScaffolderTasks rename(Name name) {
    return new BackstageScaffolderTasks(name, null);
  }

  // -------------------------------------------------------------------------
  // Row10 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row10<String, String, String, String, String, Short, String, Long, Long, Short> fieldsRow() {
    return (Row10) super.fieldsRow();
  }
}
