/*
 * Copyright 2022 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.
 */

/*
 * This file is generated by jOOQ.
 */

package io.harness.timescaledb.tables;

import io.harness.timescaledb.Keys;
import io.harness.timescaledb.Public;
import io.harness.timescaledb.tables.records.PipelineExecutionSummaryCdRecord;
import io.harness.timescaledb.tables.records.PipelinesRecord;

import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
public class PipelineExecutionSummary extends TableImpl<PipelinesRecord> {
  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.pipeline_execution_summary</code>
   */
  public static final PipelineExecutionSummary PIPELINE_EXECUTION_SUMMARY = new PipelineExecutionSummary();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<PipelinesRecord> getRecordType() {
    return PipelinesRecord.class;
  }

  /**
   * The column <code>public.pipeline_execution_summary.id</code>.
   */
  public final TableField<PipelinesRecord, String> ID =
      createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.pipeline_execution_summary.accountid</code>.
   */
  public final TableField<PipelinesRecord, String> ACCOUNTID =
      createField(DSL.name("accountid"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.orgidentifier</code>.
   */
  public final TableField<PipelinesRecord, String> ORGIDENTIFIER =
      createField(DSL.name("orgidentifier"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.projectidentifier</code>.
   */
  public final TableField<PipelinesRecord, String> PROJECTIDENTIFIER =
      createField(DSL.name("projectidentifier"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.pipelineidentifier</code>.
   */
  public final TableField<PipelinesRecord, String> PIPELINEIDENTIFIER =
      createField(DSL.name("pipelineidentifier"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.name</code>.
   */
  public final TableField<PipelinesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.status</code>.
   */
  public final TableField<PipelinesRecord, String> STATUS =
          createField(DSL.name("status"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.startts</code>.
   */
  public final TableField<PipelinesRecord, Long> STARTTS =
      createField(DSL.name("startts"), SQLDataType.BIGINT, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.endts</code>.
   */
  public final TableField<PipelinesRecord, Long> ENDTS = createField(DSL.name("endts"), SQLDataType.BIGINT, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.trigger_type</code>.
   */
  public final TableField<PipelinesRecord, String> TRIGGER_TYPE =
          createField(DSL.name("trigger_type"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.author_name</code>.
   */
  public final TableField<PipelinesRecord, String> AUTHOR_NAME =
          createField(DSL.name("author_name"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.author_avatar</code>.
   */
  public final TableField<PipelinesRecord, String> AUTHOR_AVATAR =
          createField(DSL.name("author_avatar"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.author_id</code>.
   */
  public final TableField<PipelinesRecord, String> AUTHOR_ID =
          createField(DSL.name("author_id"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pipeline_execution_summary.planexecutionid</code>.
   */
  public final TableField<PipelinesRecord, String> PLANEXECUTIONID =
      createField(DSL.name("planexecutionid"), SQLDataType.CLOB, this, "");

  private PipelineExecutionSummary(Name alias, Table<PipelinesRecord> aliased) {
    this(alias, aliased, null);
  }

  private PipelineExecutionSummary(Name alias, Table<PipelinesRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.pipeline_execution_summary</code> table reference
   */
  public PipelineExecutionSummary(String alias) {
    this(DSL.name(alias), PIPELINE_EXECUTION_SUMMARY);
  }

  /**
   * Create an aliased <code>public.pipeline_execution_summary</code> table reference
   */
  public PipelineExecutionSummary(Name alias) {
    this(alias, PIPELINE_EXECUTION_SUMMARY);
  }

  /**
   * Create a <code>public.pipeline_execution_summary</code> table reference
   */
  public PipelineExecutionSummary() {
    this(DSL.name("pipeline_execution_summary"), null);
  }

  public <O extends Record> PipelineExecutionSummary(Table<O> child, ForeignKey<O, PipelinesRecord> key) {
    super(child, key, PIPELINE_EXECUTION_SUMMARY);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public UniqueKey<PipelinesRecord> getPrimaryKey() {
    return Keys.PIPELINE_EXECUTION_SUMMARY_PKEY;
  }

  @Override
  public List<UniqueKey<PipelinesRecord>> getKeys() {
    return Arrays.<UniqueKey<PipelinesRecord>>asList(Keys.PIPELINE_EXECUTION_SUMMARY_PKEY);
  }

  @Override
  public PipelineExecutionSummary as(String alias) {
    return new PipelineExecutionSummary(DSL.name(alias), this);
  }

  @Override
  public PipelineExecutionSummary as(Name alias) {
    return new PipelineExecutionSummary(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public PipelineExecutionSummary rename(String name) {
    return new PipelineExecutionSummary(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public PipelineExecutionSummary rename(Name name) {
    return new PipelineExecutionSummary(name, null);
  }

  // -------------------------------------------------------------------------
  // Row21 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row21<String, String, String, String, String, String, String, String, Long, Long, String, String, String,
      String, String, String, String, String, String, String, String>
  fieldsRow() {
    return (Row21) super.fieldsRow();
  }
}
