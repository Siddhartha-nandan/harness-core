/*
 * Copyright 2023 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.
 */

/*
 * This file is generated by jOOQ.
 */
package io.harness.timescaledb.tables;

import io.harness.timescaledb.Indexes;
import io.harness.timescaledb.Keys;
import io.harness.timescaledb.Public;
import io.harness.timescaledb.tables.records.ServicesLicenseDailyReportRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ServicesLicenseDailyReport extends TableImpl<ServicesLicenseDailyReportRecord> {
  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.services_license_daily_report</code>
   */
  public static final ServicesLicenseDailyReport SERVICES_LICENSE_DAILY_REPORT = new ServicesLicenseDailyReport();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ServicesLicenseDailyReportRecord> getRecordType() {
    return ServicesLicenseDailyReportRecord.class;
  }

  /**
   * The column <code>public.services_license_daily_report.account_id</code>.
   */
  public final TableField<ServicesLicenseDailyReportRecord, String> ACCOUNT_ID =
      createField(DSL.name("account_id"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.services_license_daily_report.reported_day</code>.
   */
  public final TableField<ServicesLicenseDailyReportRecord, LocalDate> REPORTED_DAY =
      createField(DSL.name("reported_day"), SQLDataType.LOCALDATE.nullable(false), this, "");

  /**
   * The column <code>public.services_license_daily_report.license_count</code>.
   */
  public final TableField<ServicesLicenseDailyReportRecord, Integer> LICENSE_COUNT =
      createField(DSL.name("license_count"), SQLDataType.INTEGER, this, "");

  private ServicesLicenseDailyReport(Name alias, Table<ServicesLicenseDailyReportRecord> aliased) {
    this(alias, aliased, null);
  }

  private ServicesLicenseDailyReport(
      Name alias, Table<ServicesLicenseDailyReportRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.services_license_daily_report</code> table reference
   */
  public ServicesLicenseDailyReport(String alias) {
    this(DSL.name(alias), SERVICES_LICENSE_DAILY_REPORT);
  }

  /**
   * Create an aliased <code>public.services_license_daily_report</code> table reference
   */
  public ServicesLicenseDailyReport(Name alias) {
    this(alias, SERVICES_LICENSE_DAILY_REPORT);
  }

  /**
   * Create a <code>public.services_license_daily_report</code> table reference
   */
  public ServicesLicenseDailyReport() {
    this(DSL.name("services_license_daily_report"), null);
  }

  public <O extends Record> ServicesLicenseDailyReport(
      Table<O> child, ForeignKey<O, ServicesLicenseDailyReportRecord> key) {
    super(child, key, SERVICES_LICENSE_DAILY_REPORT);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(
        Indexes.SERVICES_LICENSE_ACCOUNT_ID_INDEX, Indexes.SERVICES_LICENSE_ACCOUNT_ID_REPORTED_DAY_INDEX);
  }

  @Override
  public UniqueKey<ServicesLicenseDailyReportRecord> getPrimaryKey() {
    return Keys.SERVICES_LICENSE_DAILY_REPORT_PKEY;
  }

  @Override
  public List<UniqueKey<ServicesLicenseDailyReportRecord>> getKeys() {
    return Arrays.<UniqueKey<ServicesLicenseDailyReportRecord>>asList(Keys.SERVICES_LICENSE_DAILY_REPORT_PKEY);
  }

  @Override
  public ServicesLicenseDailyReport as(String alias) {
    return new ServicesLicenseDailyReport(DSL.name(alias), this);
  }

  @Override
  public ServicesLicenseDailyReport as(Name alias) {
    return new ServicesLicenseDailyReport(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public ServicesLicenseDailyReport rename(String name) {
    return new ServicesLicenseDailyReport(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public ServicesLicenseDailyReport rename(Name name) {
    return new ServicesLicenseDailyReport(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<String, LocalDate, Integer> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
