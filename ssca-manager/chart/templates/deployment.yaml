apiVersion: apps/v1
kind: Deployment
metadata:
  name: ssca-manager
  namespace: {{ .Values.namespace.name }}
spec:
  selector:
    matchLabels:
      app: ssca-manager
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.maxSurge }}
      maxUnavailable: {{ .Values.maxUnavailable }}
  template:
    metadata:
      labels:
        app: ssca-manager
        harness-team: SSCA
        harness-module: SSCA
    spec:
      {{- if .Values.dockercfg }}
      imagePullSecrets:
        - name: {{ .Values.name }}-dockercfg
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - ssca-manager
              topologyKey: kubernetes.io/hostname
      containers:
        - name: ssca-manager
          image: {{ .Values.image }}
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: {{ .Values.containerPort }}
              protocol: TCP
          envFrom:
            - configMapRef:
                name: ssca-manager
            - secretRef:
                name: {{ include "ssca-manager.name" . }}
          env:
            { { - include "harnesscommon.dbconnection.redisEnv" (dict "context" .Values.global.database.redis "userVariableName" "EVENTS_FRAMEWORK_REDIS_USERNAME" "passwordVariableName" "EVENTS_FRAMEWORK_REDIS_PASSWORD") | indent 12 } }
              { { - include "harnesscommon.dbconnection.mongoEnv" . | indent 12 } }

              - name: MONGO_URI
                value: { { include "harnesscommon.dbconnection.mongoConnection" (dict "database" "ssca" "context" $) } }

              { { - if .Values.extraEnvVars } }
              { { - include "harnesscommon.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 } }
              { { - end } }
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 300
            timeoutSeconds: 5
            periodSeconds: 60
            failureThreshold: 2
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 5
          resources:
            limits:
              memory: {{ .Values.podMemory }}
            requests:
              memory: {{ .Values.podMemory }}
              cpu: {{ .Values.cpu | quote }}
