---
# Source: hello/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-hello
  labels:
    helm.sh/chart: hello-0.1.1
    app.kubernetes.io/name: hello
    app.kubernetes.io/instance: my-hello
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hello
    app.kubernetes.io/instance: my-hello
---
# Source: hello/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-hello
  labels:
    helm.sh/chart: hello-0.1.1
    app.kubernetes.io/name: hello
    app.kubernetes.io/instance: my-hello
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hello
      app.kubernetes.io/instance: my-hello
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hello
        app.kubernetes.io/instance: my-hello
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: hello
          securityContext:
            {}
          image: "cloudecho/hello:0.1.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: hello/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-hello
  labels:
    helm.sh/chart: hello-0.1.1
    app.kubernetes.io/name: hello
    app.kubernetes.io/instance: my-hello
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app: my-hello-app
  serviceName: "nginx"
  replicas: 3 # by default is 1
  minReadySeconds: 10 # by default is 0
  template:
    metadata:
      labels:
        app: my-hello-app # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: my-hello-app
          image: registry.k8s.io/nginx-slim:0.8
          ports:
            - containerPort: 80
              name: web
          volumeMounts:
            - name: www
              mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
    - metadata:
        name: www
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "my-storage-class"
        resources:
          requests:
            storage: 1Gi
---
# Source: hello/templates/statefulset-update-strategy.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-hello-ss-on-delete
  labels:
    helm.sh/chart: hello-0.1.1
    app.kubernetes.io/name: hello
    app.kubernetes.io/instance: my-hello
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app: my-hello-ss-on-delete
  serviceName: "nginx"
  replicas: 3 # by default is 1
  minReadySeconds: 10 # by default is 0
  updateStrategy:
    type: OnDelete
  template:
    metadata:
      labels:
        app: my-hello-ss-on-delete
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: my-hello-app
          image: registry.k8s.io/nginx-slim:0.8
          ports:
            - containerPort: 80
              name: web
          volumeMounts:
            - name: www
              mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
    - metadata:
        name: www
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "my-storage-class"
        resources:
          requests:
            storage: 1Gi
---
# Source: hello/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-hello-job
  labels:
    helm.sh/chart: hello-0.1.1
    app.kubernetes.io/name: hello
    app.kubernetes.io/instance: my-hello
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      name: my-hello-job
      labels:
        helm.sh/chart: hello-0.1.1
        app.kubernetes.io/name: hello
        app.kubernetes.io/instance: my-hello
        app.kubernetes.io/version: "0.1.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      restartPolicy: Never
      containers:
        - name: sleep-job
          image: "alpine:3.3"
          command: ["/bin/sleep", "10"]

---
# Source: hello/templates/job-hook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-hello-job-hook
  labels:
    helm.sh/chart: hello-0.1.1
    app.kubernetes.io/name: hello
    app.kubernetes.io/instance: my-hello
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: my-hello-job-hook
      labels:
        helm.sh/chart: hello-0.1.1
        app.kubernetes.io/name: hello
        app.kubernetes.io/instance: my-hello
        app.kubernetes.io/version: "0.1.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      restartPolicy: Never
      containers:
        - name: post-install-job
          image: "alpine:3.3"
          command: ["/bin/sleep", "10"]
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-hello-daemon-set
  namespace: kube-system
  labels:
    helm.sh/chart: hello-0.1.1
    app.kubernetes.io/name: hello
    app.kubernetes.io/instance: my-hello
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: hello
  template:
    metadata:
      labels:
        helm.sh/chart: hello-0.1.1
        app.kubernetes.io/name: hello
        app.kubernetes.io/instance: my-hello
        app.kubernetes.io/version: "0.1.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      tolerations:
        # these tolerations are to have the daemonset runnable on control plane nodes
        # remove them if your control plane nodes should not run pods
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      containers:
        - name: fluentd-elasticsearch
          image: quay.io/fluentd_elasticsearch/fluentd:v2.5.2
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 200Mi
          volumeMounts:
            - name: varlog
              mountPath: /var/log
      terminationGracePeriodSeconds: 30
      volumes:
        - name: varlog
          hostPath:
            path: /var/log
---
apiVersion: v1
kind: DeploymentConfig
metadata:
  name: my-hello-deployment-config
  labels:
    helm.sh/chart: hello-0.1.1
    app.kubernetes.io/name: hello
    app.kubernetes.io/instance: my-hello
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        labels:
          helm.sh/chart: hello-0.1.1
          app.kubernetes.io/name: hello
          app.kubernetes.io/instance: my-hello
          app.kubernetes.io/version: "0.1.0"
          app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - image: busybox
          name: my-hello-deployment-config
          command: [ "/bin/sh", "-c", "while true ; do date; sleep 1; done;" ]
  triggers:
    - type: ConfigChange