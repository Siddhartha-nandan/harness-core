Var url = concat(Env:baseUrl, "v1", Env:resourceId, "/query?scope=hierarchy&timespan=", Env:startTime, "/", Env:endTime)

Var bodyMap = {}
Var:bodyMap.put("query", Env:query)
Var azureTokenBodyMap = {}
Var:azureTokenBodyMap.put("grant_type", "client_credentials")
Var:azureTokenBodyMap.put("client_id", Env:clientId)
Var:azureTokenBodyMap.put("resource", Env:baseUrl)
Var:azureTokenBodyMap.put("client_secret", Env:clientSecret)

Var response = sync-call-azure(url=Var:url, header=Env:commonHeaders, options=Env:commonOptions, body=Var:bodyMap, bodyType=JSON, method=POST, azureTokenUrl=Env:azureTokenUrl, azureTokenBody=Var:azureTokenBodyMap)
Var table = extract(Var:response, "$.tables.[0]")
Var columns = extract(Var:table, "$.columns")

Var zero = 0
Var messageIdx = 0
Var timestampIdx = 0
Var hostNameIdx = 0
Var index = 0
Var one = 1
Var columnsLength = Var:columns.length()
while Var:index != Var:columnsLength {
    Var column = Var:columns[Var:index]
    Var key = extract(Var:column, $.name)
    Var clonedIdx = Var:index + Var:zero
    if Var:key == Env:messageIdentifier {
        messageIdx = Var:clonedIdx + Var:zero
    }
    if Var:key == Env:timeStampIdentifier {
        timestampIdx = Var:clonedIdx + Var:zero
    }
    if Var:key == Env:serviceInstanceIdentifier {
        hostNameIdx = Var:clonedIdx + Var:zero
    }
    index = Var:index + Var:one
}

Var rows = extract(Var:table, "$.rows")
Var responseList = []
foreach row in Var:rows {
    Var message = Var:row[Var:messageIdx]
    Var timestamp = Var:row[Var:timestampIdx]
    Var timeStampVal = string-to-time(Var:timestamp)
    Var host = Var:row[Var:hostNameIdx]

    Var logToReturn = new LogDataRecord(log=Var:message, timestamp=Var:timeStampVal, host=Var:host)
    Var:responseList.append(Var:logToReturn)
}
return Var:responseList